
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>SVG Drawing Tool</title>
  <style>
    body { font-family: Arial, sans-serif; }
    .wrap {
      width: 700px;
      margin: 20px auto;
      border: 2px solid #333;
      padding: 12px;
    }
    h2 { margin: 0 0 10px; }
    .board {
      background: #f7f7f7;
      border: 2px solid #888;
    }
    .toolbar { margin-bottom: 10px; display: flex; gap: 8px; }
  </style>
</head>
<body>
  <div class="wrap">
    <h2>SVG Drawing Tool</h2>

    <div class="toolbar">
      <label>Stroke:
        <input id="color" type="color" value="#1e88e5">
      </label>
      <label>Width:
        <input id="width" type="number" min="1" max="20" value="3" style="width:60px">
      </label>
      <button id="clear">Clear</button>
    </div>

    <!-- SVG is our drawing canvas -->
    <svg id="canvas" class="board" width="660" height="380"></svg>
  </div>

  <script>
    // Grab elements
    const svg   = document.getElementById('canvas');
    const color = document.getElementById('color');
    const width = document.getElementById('width');
    const clear = document.getElementById('clear');

    let drawing = false;     // are we currently drawing?
    let pathEl = null;       // current <path>
    let d = "";              // path data string (e.g., "M x y L x y ...")

    // Convert mouse position to SVG coordinates
    function getPoint(evt) {
      const rect = svg.getBoundingClientRect();
      return { x: evt.clientX - rect.left, y: evt.clientY - rect.top };
    }

    // Start new stroke
    svg.addEventListener('mousedown', (e) => {
      drawing = true;
      const { x, y } = getPoint(e);

      pathEl = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      pathEl.setAttribute('fill', 'none');
      pathEl.setAttribute('stroke', color.value);
      pathEl.setAttribute('stroke-width', width.value);
      pathEl.setAttribute('stroke-linecap', 'round');
      pathEl.setAttribute('stroke-linejoin', 'round');

      d = `M ${x} ${y}`; // move to start
      pathEl.setAttribute('d', d);
      svg.appendChild(pathEl);
    });

    // Extend stroke as mouse moves
    svg.addEventListener('mousemove', (e) => {
      if (!drawing) return;
      const { x, y } = getPoint(e);
      d += ` L ${x} ${y}`;   // line to new point
      pathEl.setAttribute('d', d);
    });

    // Stop drawing
    function stopDrawing() {
      drawing = false;
      pathEl = null;
      d = "";
    }
    svg.addEventListener('mouseup', stopDrawing);
    svg.addEventListener('mouseleave', stopDrawing);

    // Clear everything
    clear.addEventListener('click', () => {
      while (svg.firstChild) svg.removeChild(svg.firstChild);
    });
  </script>
</body>
</html>
